// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VrSmartHomeData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VrSmartHomeData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace navi {
namespace VoiceRecog {

void protobuf_ShutdownFile_VrSmartHomeData_2eproto() {
  delete APIRequest::default_instance_;
  delete ApiParam::default_instance_;
  delete ApiData::default_instance_;
  delete ApiLast::default_instance_;
  delete ApiHeart::default_instance_;
  delete ApiCancel::default_instance_;
  delete ApiThirdData::default_instance_;
  delete APIResponse::default_instance_;
  delete ASRResult::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_VrSmartHomeData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_VrSmartHomeData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  APIRequest::default_instance_ = new APIRequest();
  ApiParam::default_instance_ = new ApiParam();
  ApiData::default_instance_ = new ApiData();
  ApiLast::default_instance_ = new ApiLast();
  ApiHeart::default_instance_ = new ApiHeart();
  ApiCancel::default_instance_ = new ApiCancel();
  ApiThirdData::default_instance_ = new ApiThirdData();
  APIResponse::default_instance_ = new APIResponse();
  ASRResult::default_instance_ = new ASRResult();
  APIRequest::default_instance_->InitAsDefaultInstance();
  ApiParam::default_instance_->InitAsDefaultInstance();
  ApiData::default_instance_->InitAsDefaultInstance();
  ApiLast::default_instance_->InitAsDefaultInstance();
  ApiHeart::default_instance_->InitAsDefaultInstance();
  ApiCancel::default_instance_->InitAsDefaultInstance();
  ApiThirdData::default_instance_->InitAsDefaultInstance();
  APIResponse::default_instance_->InitAsDefaultInstance();
  ASRResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VrSmartHomeData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_VrSmartHomeData_2eproto_once_);
void protobuf_AddDesc_VrSmartHomeData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_VrSmartHomeData_2eproto_once_,
                 &protobuf_AddDesc_VrSmartHomeData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VrSmartHomeData_2eproto {
  StaticDescriptorInitializer_VrSmartHomeData_2eproto() {
    protobuf_AddDesc_VrSmartHomeData_2eproto();
  }
} static_descriptor_initializer_VrSmartHomeData_2eproto_;
#endif
bool APIReqType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool APIRespType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int APIRequest::kApiReqTypeFieldNumber;
const int APIRequest::kParamFieldNumber;
const int APIRequest::kDataFieldNumber;
const int APIRequest::kLastFieldNumber;
const int APIRequest::kCancelFieldNumber;
const int APIRequest::kThirdDataFieldNumber;
#endif  // !_MSC_VER

APIRequest::APIRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void APIRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  param_ = const_cast< ::navi::VoiceRecog::ApiParam*>(
      ::navi::VoiceRecog::ApiParam::internal_default_instance());
#else
  param_ = const_cast< ::navi::VoiceRecog::ApiParam*>(&::navi::VoiceRecog::ApiParam::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_ = const_cast< ::navi::VoiceRecog::ApiData*>(
      ::navi::VoiceRecog::ApiData::internal_default_instance());
#else
  data_ = const_cast< ::navi::VoiceRecog::ApiData*>(&::navi::VoiceRecog::ApiData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  last_ = const_cast< ::navi::VoiceRecog::ApiLast*>(
      ::navi::VoiceRecog::ApiLast::internal_default_instance());
#else
  last_ = const_cast< ::navi::VoiceRecog::ApiLast*>(&::navi::VoiceRecog::ApiLast::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cancel_ = const_cast< ::navi::VoiceRecog::ApiCancel*>(
      ::navi::VoiceRecog::ApiCancel::internal_default_instance());
#else
  cancel_ = const_cast< ::navi::VoiceRecog::ApiCancel*>(&::navi::VoiceRecog::ApiCancel::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  third_data_ = const_cast< ::navi::VoiceRecog::ApiThirdData*>(
      ::navi::VoiceRecog::ApiThirdData::internal_default_instance());
#else
  third_data_ = const_cast< ::navi::VoiceRecog::ApiThirdData*>(&::navi::VoiceRecog::ApiThirdData::default_instance());
#endif
}

APIRequest::APIRequest(const APIRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void APIRequest::SharedCtor() {
  _cached_size_ = 0;
  api_req_type_ = 1;
  param_ = NULL;
  data_ = NULL;
  last_ = NULL;
  cancel_ = NULL;
  third_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

APIRequest::~APIRequest() {
  SharedDtor();
}

void APIRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete param_;
    delete data_;
    delete last_;
    delete cancel_;
    delete third_data_;
  }
}

void APIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const APIRequest& APIRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

APIRequest* APIRequest::default_instance_ = NULL;

APIRequest* APIRequest::New() const {
  return new APIRequest;
}

void APIRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    api_req_type_ = 1;
    if (has_param()) {
      if (param_ != NULL) param_->::navi::VoiceRecog::ApiParam::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::navi::VoiceRecog::ApiData::Clear();
    }
    if (has_last()) {
      if (last_ != NULL) last_->::navi::VoiceRecog::ApiLast::Clear();
    }
    if (has_cancel()) {
      if (cancel_ != NULL) cancel_->::navi::VoiceRecog::ApiCancel::Clear();
    }
    if (has_third_data()) {
      if (third_data_ != NULL) third_data_->::navi::VoiceRecog::ApiThirdData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool APIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .navi.VoiceRecog.APIReqType api_req_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::navi::VoiceRecog::APIReqType_IsValid(value)) {
            set_api_req_type(static_cast< ::navi::VoiceRecog::APIReqType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // optional .navi.VoiceRecog.ApiParam param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .navi.VoiceRecog.ApiData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last;
        break;
      }

      // optional .navi.VoiceRecog.ApiLast last = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cancel;
        break;
      }

      // optional .navi.VoiceRecog.ApiCancel cancel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_third_data;
        break;
      }

      // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_third_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void APIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .navi.VoiceRecog.APIReqType api_req_type = 1;
  if (has_api_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->api_req_type(), output);
  }

  // optional .navi.VoiceRecog.ApiParam param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->param(), output);
  }

  // optional .navi.VoiceRecog.ApiData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->data(), output);
  }

  // optional .navi.VoiceRecog.ApiLast last = 4;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->last(), output);
  }

  // optional .navi.VoiceRecog.ApiCancel cancel = 5;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->cancel(), output);
  }

  // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
  if (has_third_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->third_data(), output);
  }

}

int APIRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .navi.VoiceRecog.APIReqType api_req_type = 1;
    if (has_api_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->api_req_type());
    }

    // optional .navi.VoiceRecog.ApiParam param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // optional .navi.VoiceRecog.ApiData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .navi.VoiceRecog.ApiLast last = 4;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

    // optional .navi.VoiceRecog.ApiCancel cancel = 5;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cancel());
    }

    // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
    if (has_third_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->third_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APIRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const APIRequest*>(&from));
}

void APIRequest::MergeFrom(const APIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_api_req_type()) {
      set_api_req_type(from.api_req_type());
    }
    if (from.has_param()) {
      mutable_param()->::navi::VoiceRecog::ApiParam::MergeFrom(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::navi::VoiceRecog::ApiData::MergeFrom(from.data());
    }
    if (from.has_last()) {
      mutable_last()->::navi::VoiceRecog::ApiLast::MergeFrom(from.last());
    }
    if (from.has_cancel()) {
      mutable_cancel()->::navi::VoiceRecog::ApiCancel::MergeFrom(from.cancel());
    }
    if (from.has_third_data()) {
      mutable_third_data()->::navi::VoiceRecog::ApiThirdData::MergeFrom(from.third_data());
    }
  }
}

void APIRequest::CopyFrom(const APIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_third_data()) {
    if (!this->third_data().IsInitialized()) return false;
  }
  return true;
}

void APIRequest::Swap(APIRequest* other) {
  if (other != this) {
    std::swap(api_req_type_, other->api_req_type_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(last_, other->last_);
    std::swap(cancel_, other->cancel_);
    std::swap(third_data_, other->third_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string APIRequest::GetTypeName() const {
  return "navi.VoiceRecog.APIRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ApiParam::kSampleRateFieldNumber;
const int ApiParam::kFormatFieldNumber;
const int ApiParam::kEarlyReturnFieldNumber;
const int ApiParam::kImeiFieldNumber;
const int ApiParam::kHomeLinkTypeFieldNumber;
const int ApiParam::kAsrBackendTypeFieldNumber;
#endif  // !_MSC_VER

ApiParam::ApiParam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiParam::InitAsDefaultInstance() {
}

ApiParam::ApiParam(const ApiParam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiParam::SharedCtor() {
  _cached_size_ = 0;
  sample_rate_ = 0;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  early_return_ = false;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  home_link_type_ = 0;
  asr_backend_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiParam::~ApiParam() {
  SharedDtor();
}

void ApiParam::SharedDtor() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (asr_backend_type_ != &::google::protobuf::internal::kEmptyString) {
    delete asr_backend_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiParam& ApiParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiParam* ApiParam::default_instance_ = NULL;

ApiParam* ApiParam::New() const {
  return new ApiParam;
}

void ApiParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sample_rate_ = 0;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    early_return_ = false;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    home_link_type_ = 0;
    if (has_asr_backend_type()) {
      if (asr_backend_type_ != &::google::protobuf::internal::kEmptyString) {
        asr_backend_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sample_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // required string format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_early_return;
        break;
      }

      // optional bool early_return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_early_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &early_return_)));
          set_has_early_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imei;
        break;
      }

      // required string imei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_home_link_type;
        break;
      }

      // required int32 home_link_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_home_link_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &home_link_type_)));
          set_has_home_link_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_asr_backend_type;
        break;
      }

      // required string asr_backend_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asr_backend_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr_backend_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApiParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sample_rate = 1;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate(), output);
  }

  // required string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->format(), output);
  }

  // optional bool early_return = 3;
  if (has_early_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->early_return(), output);
  }

  // required string imei = 4;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imei(), output);
  }

  // required int32 home_link_type = 5;
  if (has_home_link_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->home_link_type(), output);
  }

  // required string asr_backend_type = 6;
  if (has_asr_backend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->asr_backend_type(), output);
  }

}

int ApiParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sample_rate = 1;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

    // required string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional bool early_return = 3;
    if (has_early_return()) {
      total_size += 1 + 1;
    }

    // required string imei = 4;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // required int32 home_link_type = 5;
    if (has_home_link_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->home_link_type());
    }

    // required string asr_backend_type = 6;
    if (has_asr_backend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr_backend_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiParam*>(&from));
}

void ApiParam::MergeFrom(const ApiParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_early_return()) {
      set_early_return(from.early_return());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_home_link_type()) {
      set_home_link_type(from.home_link_type());
    }
    if (from.has_asr_backend_type()) {
      set_asr_backend_type(from.asr_backend_type());
    }
  }
}

void ApiParam::CopyFrom(const ApiParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void ApiParam::Swap(ApiParam* other) {
  if (other != this) {
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(format_, other->format_);
    std::swap(early_return_, other->early_return_);
    std::swap(imei_, other->imei_);
    std::swap(home_link_type_, other->home_link_type_);
    std::swap(asr_backend_type_, other->asr_backend_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiParam::GetTypeName() const {
  return "navi.VoiceRecog.ApiParam";
}


// ===================================================================

#ifndef _MSC_VER
const int ApiData::kLenFieldNumber;
const int ApiData::kPostDataFieldNumber;
#endif  // !_MSC_VER

ApiData::ApiData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiData::InitAsDefaultInstance() {
}

ApiData::ApiData(const ApiData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiData::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0u;
  post_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiData::~ApiData() {
  SharedDtor();
}

void ApiData::SharedDtor() {
  if (post_data_ != &::google::protobuf::internal::kEmptyString) {
    delete post_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiData& ApiData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiData* ApiData::default_instance_ = NULL;

ApiData* ApiData::New() const {
  return new ApiData;
}

void ApiData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    len_ = 0u;
    if (has_post_data()) {
      if (post_data_ != &::google::protobuf::internal::kEmptyString) {
        post_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_post_data;
        break;
      }

      // required bytes post_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_post_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->len(), output);
  }

  // required bytes post_data = 2;
  if (has_post_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->post_data(), output);
  }

}

int ApiData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // required bytes post_data = 2;
    if (has_post_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->post_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiData*>(&from));
}

void ApiData::MergeFrom(const ApiData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_post_data()) {
      set_post_data(from.post_data());
    }
  }
}

void ApiData::CopyFrom(const ApiData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ApiData::Swap(ApiData* other) {
  if (other != this) {
    std::swap(len_, other->len_);
    std::swap(post_data_, other->post_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiData::GetTypeName() const {
  return "navi.VoiceRecog.ApiData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApiLast::ApiLast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiLast::InitAsDefaultInstance() {
}

ApiLast::ApiLast(const ApiLast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiLast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiLast::~ApiLast() {
  SharedDtor();
}

void ApiLast::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiLast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiLast& ApiLast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiLast* ApiLast::default_instance_ = NULL;

ApiLast* ApiLast::New() const {
  return new ApiLast;
}

void ApiLast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiLast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void ApiLast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int ApiLast::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiLast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiLast*>(&from));
}

void ApiLast::MergeFrom(const ApiLast& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void ApiLast::CopyFrom(const ApiLast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiLast::IsInitialized() const {

  return true;
}

void ApiLast::Swap(ApiLast* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiLast::GetTypeName() const {
  return "navi.VoiceRecog.ApiLast";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApiHeart::ApiHeart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiHeart::InitAsDefaultInstance() {
}

ApiHeart::ApiHeart(const ApiHeart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiHeart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiHeart::~ApiHeart() {
  SharedDtor();
}

void ApiHeart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiHeart& ApiHeart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiHeart* ApiHeart::default_instance_ = NULL;

ApiHeart* ApiHeart::New() const {
  return new ApiHeart;
}

void ApiHeart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void ApiHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int ApiHeart::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiHeart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiHeart*>(&from));
}

void ApiHeart::MergeFrom(const ApiHeart& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void ApiHeart::CopyFrom(const ApiHeart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiHeart::IsInitialized() const {

  return true;
}

void ApiHeart::Swap(ApiHeart* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiHeart::GetTypeName() const {
  return "navi.VoiceRecog.ApiHeart";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApiCancel::ApiCancel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiCancel::InitAsDefaultInstance() {
}

ApiCancel::ApiCancel(const ApiCancel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiCancel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiCancel::~ApiCancel() {
  SharedDtor();
}

void ApiCancel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiCancel& ApiCancel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiCancel* ApiCancel::default_instance_ = NULL;

ApiCancel* ApiCancel::New() const {
  return new ApiCancel;
}

void ApiCancel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void ApiCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int ApiCancel::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiCancel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiCancel*>(&from));
}

void ApiCancel::MergeFrom(const ApiCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void ApiCancel::CopyFrom(const ApiCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiCancel::IsInitialized() const {

  return true;
}

void ApiCancel::Swap(ApiCancel* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiCancel::GetTypeName() const {
  return "navi.VoiceRecog.ApiCancel";
}


// ===================================================================

#ifndef _MSC_VER
const int ApiThirdData::kLenFieldNumber;
const int ApiThirdData::kThirdDataFieldNumber;
const int ApiThirdData::kTypeFieldNumber;
#endif  // !_MSC_VER

ApiThirdData::ApiThirdData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApiThirdData::InitAsDefaultInstance() {
}

ApiThirdData::ApiThirdData(const ApiThirdData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApiThirdData::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0u;
  third_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiThirdData::~ApiThirdData() {
  SharedDtor();
}

void ApiThirdData::SharedDtor() {
  if (third_data_ != &::google::protobuf::internal::kEmptyString) {
    delete third_data_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApiThirdData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApiThirdData& ApiThirdData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ApiThirdData* ApiThirdData::default_instance_ = NULL;

ApiThirdData* ApiThirdData::New() const {
  return new ApiThirdData;
}

void ApiThirdData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    len_ = 0u;
    if (has_third_data()) {
      if (third_data_ != &::google::protobuf::internal::kEmptyString) {
        third_data_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApiThirdData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_third_data;
        break;
      }

      // required bytes third_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_third_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApiThirdData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->len(), output);
  }

  // required bytes third_data = 2;
  if (has_third_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->third_data(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

}

int ApiThirdData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // required bytes third_data = 2;
    if (has_third_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->third_data());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiThirdData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApiThirdData*>(&from));
}

void ApiThirdData::MergeFrom(const ApiThirdData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_third_data()) {
      set_third_data(from.third_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ApiThirdData::CopyFrom(const ApiThirdData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiThirdData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ApiThirdData::Swap(ApiThirdData* other) {
  if (other != this) {
    std::swap(len_, other->len_);
    std::swap(third_data_, other->third_data_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApiThirdData::GetTypeName() const {
  return "navi.VoiceRecog.ApiThirdData";
}


// ===================================================================

#ifndef _MSC_VER
const int APIResponse::kTypeFieldNumber;
const int APIResponse::kIdFieldNumber;
const int APIResponse::kErrNoFieldNumber;
const int APIResponse::kErrMsgFieldNumber;
const int APIResponse::kResultFieldNumber;
const int APIResponse::kThirdDataFieldNumber;
const int APIResponse::kHeartFieldNumber;
const int APIResponse::kLastFieldNumber;
#endif  // !_MSC_VER

APIResponse::APIResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void APIResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  result_ = const_cast< ::navi::VoiceRecog::ASRResult*>(
      ::navi::VoiceRecog::ASRResult::internal_default_instance());
#else
  result_ = const_cast< ::navi::VoiceRecog::ASRResult*>(&::navi::VoiceRecog::ASRResult::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  third_data_ = const_cast< ::navi::VoiceRecog::ApiThirdData*>(
      ::navi::VoiceRecog::ApiThirdData::internal_default_instance());
#else
  third_data_ = const_cast< ::navi::VoiceRecog::ApiThirdData*>(&::navi::VoiceRecog::ApiThirdData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  heart_ = const_cast< ::navi::VoiceRecog::ApiHeart*>(
      ::navi::VoiceRecog::ApiHeart::internal_default_instance());
#else
  heart_ = const_cast< ::navi::VoiceRecog::ApiHeart*>(&::navi::VoiceRecog::ApiHeart::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  last_ = const_cast< ::navi::VoiceRecog::ApiLast*>(
      ::navi::VoiceRecog::ApiLast::internal_default_instance());
#else
  last_ = const_cast< ::navi::VoiceRecog::ApiLast*>(&::navi::VoiceRecog::ApiLast::default_instance());
#endif
}

APIResponse::APIResponse(const APIResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void APIResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_no_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = NULL;
  third_data_ = NULL;
  heart_ = NULL;
  last_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

APIResponse::~APIResponse() {
  SharedDtor();
}

void APIResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete result_;
    delete third_data_;
    delete heart_;
    delete last_;
  }
}

void APIResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const APIResponse& APIResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

APIResponse* APIResponse::default_instance_ = NULL;

APIResponse* APIResponse::New() const {
  return new APIResponse;
}

void APIResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    err_no_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::navi::VoiceRecog::ASRResult::Clear();
    }
    if (has_third_data()) {
      if (third_data_ != NULL) third_data_->::navi::VoiceRecog::ApiThirdData::Clear();
    }
    if (has_heart()) {
      if (heart_ != NULL) heart_->::navi::VoiceRecog::ApiHeart::Clear();
    }
    if (has_last()) {
      if (last_ != NULL) last_->::navi::VoiceRecog::ApiLast::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool APIResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .navi.VoiceRecog.APIRespType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::navi::VoiceRecog::APIRespType_IsValid(value)) {
            set_type(static_cast< ::navi::VoiceRecog::APIRespType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // required int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // optional .navi.VoiceRecog.ASRResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_third_data;
        break;
      }

      // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_third_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_heart;
        break;
      }

      // optional .navi.VoiceRecog.ApiHeart heart = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_last;
        break;
      }

      // optional .navi.VoiceRecog.ApiLast last = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void APIResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .navi.VoiceRecog.APIRespType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // required int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  // optional string err_msg = 4;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err_msg(), output);
  }

  // optional .navi.VoiceRecog.ASRResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->result(), output);
  }

  // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
  if (has_third_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->third_data(), output);
  }

  // optional .navi.VoiceRecog.ApiHeart heart = 7;
  if (has_heart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->heart(), output);
  }

  // optional .navi.VoiceRecog.ApiLast last = 8;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->last(), output);
  }

}

int APIResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .navi.VoiceRecog.APIRespType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // optional string err_msg = 4;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

    // optional .navi.VoiceRecog.ASRResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .navi.VoiceRecog.ApiThirdData third_data = 6;
    if (has_third_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->third_data());
    }

    // optional .navi.VoiceRecog.ApiHeart heart = 7;
    if (has_heart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heart());
    }

    // optional .navi.VoiceRecog.ApiLast last = 8;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APIResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const APIResponse*>(&from));
}

void APIResponse::MergeFrom(const APIResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
    if (from.has_result()) {
      mutable_result()->::navi::VoiceRecog::ASRResult::MergeFrom(from.result());
    }
    if (from.has_third_data()) {
      mutable_third_data()->::navi::VoiceRecog::ApiThirdData::MergeFrom(from.third_data());
    }
    if (from.has_heart()) {
      mutable_heart()->::navi::VoiceRecog::ApiHeart::MergeFrom(from.heart());
    }
    if (from.has_last()) {
      mutable_last()->::navi::VoiceRecog::ApiLast::MergeFrom(from.last());
    }
  }
}

void APIResponse::CopyFrom(const APIResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_third_data()) {
    if (!this->third_data().IsInitialized()) return false;
  }
  return true;
}

void APIResponse::Swap(APIResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(err_no_, other->err_no_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(result_, other->result_);
    std::swap(third_data_, other->third_data_);
    std::swap(heart_, other->heart_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string APIResponse::GetTypeName() const {
  return "navi.VoiceRecog.APIResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ASRResult::kWordFieldNumber;
const int ASRResult::kUncertainWordFieldNumber;
#endif  // !_MSC_VER

ASRResult::ASRResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ASRResult::InitAsDefaultInstance() {
}

ASRResult::ASRResult(const ASRResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ASRResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASRResult::~ASRResult() {
  SharedDtor();
}

void ASRResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ASRResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ASRResult& ASRResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VrSmartHomeData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VrSmartHomeData_2eproto();
#endif
  return *default_instance_;
}

ASRResult* ASRResult::default_instance_ = NULL;

ASRResult* ASRResult::New() const {
  return new ASRResult;
}

void ASRResult::Clear() {
  word_.Clear();
  uncertain_word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ASRResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string word = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_word;
        if (input->ExpectTag(18)) goto parse_uncertain_word;
        break;
      }

      // repeated string uncertain_word = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uncertain_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uncertain_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uncertain_word;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASRResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->word(i), output);
  }

  // repeated string uncertain_word = 2;
  for (int i = 0; i < this->uncertain_word_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uncertain_word(i), output);
  }

}

int ASRResult::ByteSize() const {
  int total_size = 0;

  // repeated string word = 1;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->word(i));
  }

  // repeated string uncertain_word = 2;
  total_size += 1 * this->uncertain_word_size();
  for (int i = 0; i < this->uncertain_word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uncertain_word(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASRResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ASRResult*>(&from));
}

void ASRResult::MergeFrom(const ASRResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  word_.MergeFrom(from.word_);
  uncertain_word_.MergeFrom(from.uncertain_word_);
}

void ASRResult::CopyFrom(const ASRResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASRResult::IsInitialized() const {

  return true;
}

void ASRResult::Swap(ASRResult* other) {
  if (other != this) {
    word_.Swap(&other->word_);
    uncertain_word_.Swap(&other->uncertain_word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ASRResult::GetTypeName() const {
  return "navi.VoiceRecog.ASRResult";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceRecog
}  // namespace navi

// @@protoc_insertion_point(global_scope)
